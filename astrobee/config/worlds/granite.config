-- Copyright (c) 2017, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The Astrobee platform is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.

local matrix = require 'matrix'

--------------------------
--      MOBILITY       --
--------------------------

-- Path to the file containing zones
world_zone_directory = resolve_resource("zones")

--------------------------
--      LOCALIZATION    --
--------------------------

-- Sparse map
world_vision_map_filename = resolve_resource("maps/p4d.map")

-- AR Tag marker file
world_vision_ar_tag_filename = resolve_resource("granite_lab_markers.config")


--------------------------
--       PHYSICS        --
--------------------------

world_gravity_vector = vec3(0.0, 0.0, 9.80665);

--------------------------
--       INERTIA        --
--------------------------

-- Inertial Parameters
world_inertia_com = vec3(0.0, 0.0, 0.0);              -- Center of mass
world_inertia_mass = 14.4;                            -- Platform mass
world_inertia_matrix = matrix{{.1083, 0, 0},
                              {0, .1083, 0},
                              {0, 0, .1083}};         -- Inertia matrix

--------------------------
--     FLIGHT MODES     --
--------------------------

-- Default flight mode
world_default_flight_mode = "nominal";

-- All possible flight modes
world_flight_modes = {
  -------------
  -- NOMINAL --
  -------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "nominal";

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Tolerances
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.2000;  -- 20 cm/s
    hard_limit_accel = 0.0200;  --  5 cm/s^2
    hard_limit_omega = 0.1745;  -- 10 deg/s (in rads/s)
    hard_limit_alpha = 0.1745;  -- 10 deg/s^2 (in rads/s^2)
  },
  ----------------
  -- AGGRESSIVE --
  ----------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "difficult";

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Tolerances
    tolerance_pos   = 0.2;                         -- Position (20 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.3490;                      -- Attitude (20 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.4000;  -- 40 cm/s
    hard_limit_accel = 0.0400;  --  8 cm/s^2
    hard_limit_omega = 0.5236;  -- 30 deg/s (in rads/s)
    hard_limit_alpha = 0.5236;  -- 30 deg/s^2 (in rads/s^2)
  },
  -------------
  -- DOCKING --
  -------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "docking";

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Tolerances
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.2000;  -- 20 cm/s
    hard_limit_accel = 0.0200;  --  5 cm/s^2
    hard_limit_omega = 0.1745;  -- 10 deg/s (in rads/s)
    hard_limit_alpha = 0.1745;  -- 10 deg/s^2 (in rads/s^2)
  },
  --------------
  -- PERCHING --
  --------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "perching";

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Tolerances
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.2000;  -- 20 cm/s
    hard_limit_accel = 0.0200;  --  5 cm/s^2
    hard_limit_omega = 0.1745;  -- 10 deg/s (in rads/s)
    hard_limit_alpha = 0.1745;  -- 10 deg/s^2 (in rads/s^2)
  }
}

--------------------------
--       VISUALEYEZ     --
--------------------------

-- Visualeyez not required
world_visualeyez_grounding = {}
world_visualeyez_targets = {}
world_visualeyez_calibration = ""
