-- Copyright (c) 2017, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The Astrobee platform is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.

cam_timeout = 3.0        -- [seconds] how long to wait to enable the camera
ekf_timeout = 3.0        -- [seconds] how long to wait to switch the ekf
pmc_timeout = 3.0        -- [seconds] how long to wait for the pmc service
position_timeout = 5.0   -- [seconds] how long to wait for a position lock
mobility_timeout = 3.0   -- [seconds] how long to wait for mobility

-- common has a transform, but this is not a transform
-- (slight, pedantic distinction)
function pose(_v, _q)
  return {position=_v, orientation=_q}
end

function twist(_lin, _ang)
  return {linear=_lin, angular=_ang}
end

function vec3n(...)
  local n = select("#", ...)
  if n == 1 then
    local v = select(1,...)
    return vec3(v, v, v)
  end
  if n == 3 then vec3(...) end
  return {}
end

-- limits on the velocity and acceleration for ingressing into the dock
-- * velocity and speed are specified in m/s
-- * acceleration is specified in m/s^2
ingress_limits = { vel=twist(vec3n(0.01), vec3n(0.2)),
                   accel=twist(vec3n(0.01), vec3n(0.1)),
                   speed=0.01 }

-- TODO(tfmorse): determine egress limits

-- TODO(tfmorse) add tolerances, when they become relevant

-- positions and approach points to the docking bays
-- this is valid for the granite lab
dock_bays = {
  -- bay 1 (near the controls) [INVALID]
  { initial=pose(vec3(0.0, 0.0, 0.0), quat4(0.0, 0.0, 0.0, 0.0)),
    final=pose(vec3(0.0, 0.0, 0,0), quat4(0.0, 0.0, 0.0, 0.0)) },

  -- bay 2 (near the chargers)
  { initial=pose(vec3(-0.15000, 0.56999, -0.800),
                 quat4(0.0, 0.0, 0.0348, 0.9993)),
    final=pose(vec3(-0.5400, 0.5699, -0.8000),
	           quat4(0.0, 0.0, 0.0348, 0.9993)) }
}
